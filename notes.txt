Lable Widgets
To add a label to our previous example,
we will create a label using the label class like this:
-> lbl = Label(window, text="Hello")

HANDLE THE BUTTON CLICK EVENT
First we write the function that we need to execute when the button is clicked
Then we will wire it the button by specifing the finction inside the button

GET INPUT USING ENTRY CLASS
We can create a textbox using Tkinter Entry like this:
    txt = Entry(windo, width=10)

SET FOCUS TO THE ENTRY WIDGETS 
All we need to do is to use the .focus() keyword

#CREATE A SIMPLECALCULATOR2
1. The title of the calculator will be your name
2. The background color should be green
3. The size of the app should be 400 by 300
4. For each button indicate a symbol eg addition -> +
5. Change the location of the buttons following this procedure
    add was c=0,r=0 -> c=0,r=4
    subtraction was c=0,r=4 -> c=0,r=3
    Multiplication was c=1,r=3 -> c=1,r=4
    division was c=1,r=4 -> c=1,r=3

TRY AND EXCEPT
The try  block let you test a block of code for errors
The except block lets you handle the errors
The finally block lets you execute code, regardless of the result of the try and 
except clocks

Exception Handling
When errors occurs, or exception as we call it, Python will normally stop and generate 
an error message. These execptions can be handled using the try statement

MessageBox Widget
It is used to display the message boxes in the python applications.
messagebox.Fuction_Name(title, message[, options])